(self.webpackChunktypegraphql_prisma_website=self.webpackChunktypegraphql_prisma_website||[]).push([[367],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return c},kt:function(){return m}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),s=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=s(e.components);return n.createElement(p.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=o,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return t?n.createElement(f,i(i({ref:r},c),{},{components:t})):n.createElement(f,i({ref:r},c))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var p in r)hasOwnProperty.call(r,p)&&(l[p]=r[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1521:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return s},default:function(){return u}});var n=t(2122),o=t(9756),a=(t(7294),t(3905)),i={title:"Simple resolvers (performance)",sidebar_label:"Simple resolvers",sidebar_position:2},l=void 0,p={unversionedId:"advanced/simple-resolvers",id:"advanced/simple-resolvers",isDocsHomePage:!1,title:"Simple resolvers (performance)",description:"If you don't have any global middlewares and you want to tune the generated schema performance, you can turn on the simpleResolvers generator option:",source:"@site/../docs/advanced/simple-resolvers.md",sourceDirName:"advanced",slug:"/advanced/simple-resolvers",permalink:"/docs/advanced/simple-resolvers",editUrl:"https://github.comichalLytek/typegraphql-prisma/edit/main/docs/../docs/advanced/simple-resolvers.md",version:"current",sidebarPosition:2,frontMatter:{title:"Simple resolvers (performance)",sidebar_label:"Simple resolvers",sidebar_position:2},sidebar:"docs",previous:{title:"Exposing selected actions",permalink:"/docs/advanced/exposing-actions"},next:{title:"Hiding field",permalink:"/docs/advanced/hiding-field"}},s=[],c={toc:s};function u(e){var r=e.components,t=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If you don't have any global middlewares and you want to tune the generated schema performance, you can turn on the ",(0,a.kt)("inlineCode",{parentName:"p"},"simpleResolvers")," generator option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-prisma"},'generator typegraphql {\n  provider        = "typegraphql-prisma"\n  simpleResolvers = true\n}\n')),(0,a.kt)("p",null,"It will generate then all the output type and model type classes with ",(0,a.kt)("inlineCode",{parentName:"p"},"simpleResolvers: true")," option of ",(0,a.kt)("inlineCode",{parentName:"p"},"ObjectType")," decorator, ",(0,a.kt)("a",{parentName:"p",href:"https://typegraphql.com/docs/performance.html#further-performance-tweaks"},"which can improve performance of underlying field resolvers"),", e.g.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@TypeGraphQL.ObjectType({\n  isAbstract: true,\n  description: undefined,\n  simpleResolvers: true,\n})\nexport class BatchPayload {\n  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {\n    nullable: false,\n    description: undefined,\n  })\n  count!: number;\n}\n")))}u.isMDXComponent=!0}}]);